// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hashicorp/nomad-autoscaler/pkg/node (interfaces: Status)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/pkg/node/node.go . Status
//
// Package mock_node is a generated GoMock package.
package mock_node

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStatus is a mock of Status interface.
type MockStatus struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMockRecorder
}

// MockStatusMockRecorder is the mock recorder for MockStatus.
type MockStatusMockRecorder struct {
	mock *MockStatus
}

// NewMockStatus creates a new mock instance.
func NewMockStatus(ctrl *gomock.Controller) *MockStatus {
	mock := &MockStatus{ctrl: ctrl}
	mock.recorder = &MockStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatus) EXPECT() *MockStatusMockRecorder {
	return m.recorder
}

// IsIneligible mocks base method.
func (m *MockStatus) IsIneligible(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIneligible", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIneligible indicates an expected call of IsIneligible.
func (mr *MockStatusMockRecorder) IsIneligible(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIneligible", reflect.TypeOf((*MockStatus)(nil).IsIneligible), arg0)
}
