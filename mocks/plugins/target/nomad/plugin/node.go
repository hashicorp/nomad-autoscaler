// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hashicorp/nomad-autoscaler/plugins/target/nomad/plugin (interfaces: NodeStatus)

// Package mock_plugin is a generated GoMock package.
package mock_plugin

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNodeStatus is a mock of NodeStatus interface.
type MockNodeStatus struct {
	ctrl     *gomock.Controller
	recorder *MockNodeStatusMockRecorder
}

// MockNodeStatusMockRecorder is the mock recorder for MockNodeStatus.
type MockNodeStatusMockRecorder struct {
	mock *MockNodeStatus
}

// NewMockNodeStatus creates a new mock instance.
func NewMockNodeStatus(ctrl *gomock.Controller) *MockNodeStatus {
	mock := &MockNodeStatus{ctrl: ctrl}
	mock.recorder = &MockNodeStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeStatus) EXPECT() *MockNodeStatusMockRecorder {
	return m.recorder
}

// IsIneligible mocks base method.
func (m *MockNodeStatus) IsIneligible(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIneligible", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIneligible indicates an expected call of IsIneligible.
func (mr *MockNodeStatusMockRecorder) IsIneligible(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIneligible", reflect.TypeOf((*MockNodeStatus)(nil).IsIneligible), arg0)
}
