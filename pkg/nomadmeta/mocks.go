// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hashicorp/nomad-autoscaler/pkg/nomadmeta (interfaces: NodeCounter)
//
// Generated by this command:
//
//	mockgen -destination=mocks.go -package=nomadmeta github.com/hashicorp/nomad-autoscaler/pkg/nomadmeta NodeCounter
//

// Package nomadmeta is a generated GoMock package.
package nomadmeta

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNodeCounter is a mock of NodeCounter interface.
type MockNodeCounter struct {
	ctrl     *gomock.Controller
	recorder *MockNodeCounterMockRecorder
	isgomock struct{}
}

// MockNodeCounterMockRecorder is the mock recorder for MockNodeCounter.
type MockNodeCounterMockRecorder struct {
	mock *MockNodeCounter
}

// NewMockNodeCounter creates a new mock instance.
func NewMockNodeCounter(ctrl *gomock.Controller) *MockNodeCounter {
	mock := &MockNodeCounter{ctrl: ctrl}
	mock.recorder = &MockNodeCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeCounter) EXPECT() *MockNodeCounterMockRecorder {
	return m.recorder
}

// CountNodes mocks base method.
func (m *MockNodeCounter) CountNodes(filter, nodePool string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountNodes", filter, nodePool)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountNodes indicates an expected call of CountNodes.
func (mr *MockNodeCounterMockRecorder) CountNodes(filter, nodePool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountNodes", reflect.TypeOf((*MockNodeCounter)(nil).CountNodes), filter, nodePool)
}

// CountRunningOnIneligible mocks base method.
func (m *MockNodeCounter) CountRunningOnIneligible(job string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRunningOnIneligible", job)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRunningOnIneligible indicates an expected call of CountRunningOnIneligible.
func (mr *MockNodeCounterMockRecorder) CountRunningOnIneligible(job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRunningOnIneligible", reflect.TypeOf((*MockNodeCounter)(nil).CountRunningOnIneligible), job)
}

// GetNodeNames mocks base method.
func (m *MockNodeCounter) GetNodeNames(filter, nodePool string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeNames", filter, nodePool)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeNames indicates an expected call of GetNodeNames.
func (mr *MockNodeCounterMockRecorder) GetNodeNames(filter, nodePool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeNames", reflect.TypeOf((*MockNodeCounter)(nil).GetNodeNames), filter, nodePool)
}

// RunningOnIneligibleNodes mocks base method.
func (m *MockNodeCounter) RunningOnIneligibleNodes(job string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunningOnIneligibleNodes", job)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunningOnIneligibleNodes indicates an expected call of RunningOnIneligibleNodes.
func (mr *MockNodeCounterMockRecorder) RunningOnIneligibleNodes(job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunningOnIneligibleNodes", reflect.TypeOf((*MockNodeCounter)(nil).RunningOnIneligibleNodes), job)
}
